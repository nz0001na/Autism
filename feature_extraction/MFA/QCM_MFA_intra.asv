function [eigvector, eigvalue, elapse] = QCM_MFA(gnd, options, data)
% MFA: Marginal Fisher Analysis
%
%       [eigvector, eigvalue] = MFA(gnd, options, data)
% 
%             Input:
%               data       - Data matrix. Each row vector of fea is a data point.
%
%               gnd     - Label vector.  
%
%               options - Struct value in Matlab. The fields in options
%                         that can be set:
%                 intraK         = 0  
%                                     Sc:
%                                       Put an edge between two nodes if and
%                                       only if they belong to same class. 
%                                > 0  Sc:
%                                       Put an edge between two nodes if
%                                       they belong to same class and they
%                                       are among the intraK nearst neighbors of
%                                       each other in this class.  
%                 interK         = 0  Sp:
%                                       Put an edge between two nodes if and
%                                       only if they belong to different classes. 
%                                > 0
%                                     Sp:
%                                       Put an edge between two nodes if
%                                       they rank top interK pairs of all the
%                                       distance pair of samples belong to
%                                       different classes 
%
%                         Please see LGE.m for other options.
%
%             Output:
%               eigvector - Each column is an embedding function, for a new
%                           data point (row vector) x,  y = x*eigvector
%                           will be the embedding result of x.
%               eigvalue  - The eigvalue of LPP eigen-problem. sorted from
%                           smallest to largest. 
%               elapse    - Time spent on different steps 
% 
%
%    Examples:
%
%       
%       
%       fea = rand(50,70);
%       gnd = [ones(10,1);ones(15,1)*2;ones(10,1)*3;ones(15,1)*4];
%       options = [];
%       options.intraK = 5;
%       options.interK = 40;
%       options.Regu = 1;
%       [eigvector, eigvalue] = MFA(gnd, options, fea);
%       Y = fea*eigvector;
% 
% 
%
% See also LPP, LGE
%
%Reference:
%
%   S. Yan, D. Xu, B. Zhang, H.-J. Zhang, Q. Yang, and S. Lin.
%    "Graph embedding and extension: A general framework for
%    dimensionality reduction." IEEE Transactions on PAMI,
%    29(1), 2007. 
%
%   Deng Cai, Xiaofei He, Yuxiao Hu, Jiawei Han, and Thomas Huang, 
%   "Learning a Spatially Smooth Subspace for Face Recognition", CVPR'2007
%
%   version 2.1 --June/2007 
%   version 2.0 --May/2007 
%   version 1.1 --Sep/2006 
%
%   Written by Deng Cai (dengcai2 AT cs.uiuc.edu)
%

bGlobal = 0;
if ~exist('data','var')
    bGlobal = 1;
    global data;
end

if (~exist('options','var'))
   options = [];
end


[nSmp,nFea] = size(data);
if length(gnd) ~= nSmp
    error('gnd and data mismatch!');
end

intraK = 5;
if isfield(options,'intraK') 
    intraK = options.intraK;
end

interK = 20;
if isfield(options,'interK') 
    interK = options.interK;
end

tmp_T = cputime;

Label = unique(gnd);
nLabel = length(Label);


%D = EuDist2(data,[],0);
D=zeros(nSmp,nSmp);
for i=1:nSmp
    for j=i+1:nSmp
        %D2=sum((data(i,:)-data(j,:)).^2);
        D2 = double(abs(1-pdist([data(i,:);data(j,:)],'cosine')));
        %D2=1-abs(1-pdist([data(i,:);data(j,:)],'cosine'));
        D(i,j)=D2;
        D(j,i)=D2;
    end
end

%D = EuDist2(data,[],0);
realD=zeros(nSmp,nSmp);
for i=1:nSmp
    for j=i+1:nSmp
        %D2=sum((data(i,:)-data(j,:)).^2);
        D2 = 1-abs(1-pdist([data(i,:);data(j,:)],'cosine'));
        realD(i,j)=D2;
        realD(j,i)=D2;
    end
end


nIntraPair = 0;
if intraK > 0
    G = zeros(nSmp*(intraK+1),3);
    idNow = 0;
    for i=1:nLabel
        classIdx = find(gnd==Label(i));
        DClass = D(classIdx,classIdx);
        lambda = 1;
        t = 1;
        beta = 0.7;
        gamma = 0.6;
        %%%QCM
        %hierarchy = quasiCliqueMerger(DClass,lambda,t,beta,gamma);
        %save(['row_hierarchy_',int2str(i),'.mat'],'hierarchy');
        load(['row_hierarchy_',int2str(i),'.mat']);
        idx = zeros(size(DClass));
        count = zeros(size(DClass,1),1);
        
         hi = 1;
             ids = hierarchy{hi};
            for ddi = 1:size(ids,1)
                dd = find(ids(ddi,:)==1);
                for di = 1:length(dd)
                    for dj = di+1:length(dd)  
                        if isempty(find(idx(dd(di),:)==dd(dj)))
                            count(dd(di)) = count(dd(di)) + 1;
                            idx(dd(di),count(dd(di))) = dd(dj);
                        end
                        if isempty(find(idx(ddd(dj),:)==dd(di)))
                            count(dd(dj)) = count(dd(dj)) + 1;
                            idx(dd(dj),count(dd(dj))) = dd(di);
                        end
                         fprintf('level1 %d %d %d %d %d\n',di, dj,dd(di),dd(dj),count(dd(di)),count(dd(dj)));
                    end
                end
            end
         hi = 2;
        if(length(hierarchy)>=hi)
             ids2= hierarchy{hi};
            for ddi = 1:size(ids2,1)
                dd = find(ids2(ddi,:)==1);
                ddd = [];
                for jjj = 1:length(dd)
                    ddd =[ddd, find(ids(dd(jjj),:)>0)];
                end
                ddd = unique(ddd);
               for di = 1:length(ddd)
                    for dj = di+1:length(ddd)  
                        if isempty(find(idx(ddd(di),:)==ddd(dj)))
                            count(ddd(di)) = count(ddd(di)) + 1;
                            idx(ddd(di),count(ddd(di))) = ddd(dj);
                            fprintf('level2 %d %d %d %d %d\n',di, dj,ddd(di),ddd(dj),count(ddd(di)));
                        end
                         if isempty(find(idx(ddd(dj),:)==ddd(di)))
                            count(ddd(dj)) = count(ddd(dj)) + 1;
                            idx(ddd(dj),count(ddd(dj))) = ddd(di);
                            fprintf('level2 %d %d %d %d %d\n',di, dj,ddd(di),ddd(dj),count(ddd(dj)));
                         end
                    end
                end
            end
        end
%          hi = 3;
%         if(length(hierarchy)>=hi)
%             ids3= hierarchy{hi};
%             for ddi = 1:size(ids3,1)
%                 dd = find(ids3(ddi,:)==1);
%                 ddd = [];
%                 for jjj = 1:length(dd)
%                     mm=find(ids2(dd(jjj),:)==1);
%                     for ccc = 1:length(mm)
%                      ddd =[ddd, find(ids(mm(ccc),:)>0)];
%                     end
%                 end
%                 
%                 for di = 1:length(ddd)
%                     for dj = di+1:length(ddd)                        
%                        if isempty(find(idx(ddd(di),:)==ddd(dj)))
%                             count(ddd(di)) = count(ddd(di)) + 1;
%                             idx(ddd(di),count(ddd(di))) = ddd(dj);
%                         end
%                          if isempty(find(idx(ddd(dj),:)==ddd(di)))
%                             count(ddd(dj)) = count(ddd(dj)) + 1;
%                             idx(ddd(dj),count(ddd(dj))) = ddd(di);
%                          end
%                     end
%                 end
%             end
%         end

%        Input: G     - Weighted adjacency matrix of a graph.
%     lambda,t - determines the value alpha_n used by subroutine Grow
%                as a threshhold for adding edges. Higher alpha means fewer
%                edges are added to a commmunity.
%
%                    alpha_n = 1 - 1/(2*lambda(n+t))
%
%        beta  - Communities C1 and C2 are merged if they overlap
%                in beta * min( |C1|, |C2| ) vertices or more.
%        gamma - edges with weight at least as great as gamma * the max
%                edge weight may be used as the basis of a community
% Output: hierarchy{k} is the kth level community structure in particular
%         A1 := hierarchy{1} is the matrix
%
%         A1(i,j) = | 1 if vertex j is in the level 1 community i
%                   | 0 otherwise
%
%         and similarly, thinking of communities of a lower level as nodes,
%         for all other levels Ak := hierarchy{k} is the matrix
%
%         Ak(i,j) = | 1 if the jth level (k-1) community is part of the
%                   |      ith level k community
%                   | 0 otherwise
%
%         Note that the last element of hierarchy should be a vector of
%         ones, denoting that the overall graph cover is a union of the 
%         all of communities from the previous step.
%D = EuDist2(data,[],0);
       clear D;
       D = realD;
           nClassNow = length(classIdx);
        nIntraPair = nIntraPair + nClassNow^2;
        DClass = D(classIdx,classIdx);
         [dump idxxx] = sort(DClass,2); % sort each row
             clear DClass dump;
             xxxid = find(idx(:,1)==0);
             idx(xxxid,:) = idxxx(xxxid,1:size(idx,2));
             
       
        for xxi = 1:size(idx,1)
            for xxj = 1:intraK+1%size(idx,2)
                if idx(xxi,xxj)==0
                    for xxt = 1:size(idxxx,2)
                        if isempty(find(ismember(idx(xxi,:),idxxx(xxi,xxt))))
                            idx(xxi,xxj)=idxxx(xxi,xxt);
                            break;
                        end
                    end
                end
            end
        end
        idx = int32(idx);
        
       
       
        if intraK < nClassNow
            idx = idx(:,1:intraK+1);
        else
            idx = [idx repmat(idx(:,end),1,intraK+1-nClassNow)];
        end
             
% % %         nClassNow = length(classIdx);
% % %         nIntraPair = nIntraPair + nClassNow^2;
% % %         if intraK < nClassNow
% % %             idx = idx(:,1:intraK+1);
% % %         else
% % %             idx = [idx repmat(idx(:,end),1,intraK+1-nClassNow)];
% % %         end

        nSmpClass = length(classIdx)*(intraK+1);
        G(idNow+1:nSmpClass+idNow,1) = repmat(classIdx,[intraK+1,1]);
        G(idNow+1:nSmpClass+idNow,2) = classIdx(idx(:));
        G(idNow+1:nSmpClass+idNow,3) = 1;
        idNow = idNow+nSmpClass;
        clear idx
    end
    Sc = sparse(G(:,1),G(:,2),G(:,3),nSmp,nSmp);
    [I,J,V] = find(Sc);
    Sc = sparse(I,J,1,nSmp,nSmp);
    Sc = max(Sc,Sc');
    clear G
else
    Sc = zeros(nSmp,nSmp);
    for i=1:nLabel
        classIdx = find(gnd==Label(i));
        nClassNow = length(classIdx);
        nIntraPair = nIntraPair + nClassNow^2;
        Sc(classIdx,classIdx) = 1;
    end
end
%%%%%%%%%%
% D=zeros(nSmp,nSmp);
% for i=1:nSmp
%     for j=i+1:nSmp
%         %D2=sum((data(i,:)-data(j,:)).^2);
%         D2=pdist([data(i,:);data(j,:)],'cosine');
%         %D2 = double(1-pdist([data(i,:);data(j,:)],'cosine'));
%         D(i,j)=D2;
%         D(j,i)=D2;
%     end
% end
if interK > 0 & (interK < (nSmp^2 - nIntraPair))
    maxD = max(max(D))+100;
    for i=1:nLabel
        classIdx = find(gnd==Label(i));
        D(classIdx,classIdx) = maxD;
    end
    
    [dump,idx] = sort(D(:));
    clear dump D
    idx = idx(1:interK);
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    [I, J] = ind2sub([nSmp,nSmp],idx);
    Sp = sparse(I,J,1,nSmp,nSmp);
    Sp = max(Sp,Sp');
else
    Sp = ones(nSmp,nSmp);
    for i=1:nLabel
        classIdx = find(gnd==Label(i));
        Sp(classIdx,classIdx) = 0;
    end
end

Dp = full(sum(Sp,2));
Sp = -Sp;
for i=1:size(Sp,1)
    Sp(i,i) = Sp(i,i) + Dp(i);
end

Dc = full(sum(Sc,2));
Sc = -Sc;
for i=1:size(Sc,1)
    Sc(i,i) = Sc(i,i) + Dc(i);
end

timeW = cputime - tmp_T;

%==========================
% If data is too large, the following centering codes can be commented
%==========================
if isfield(options,'keepMean') & options.keepMean
    ;
else
    if issparse(data)
        data = full(data);
    end
    sampleMean = mean(data);
    data = (data - repmat(sampleMean,nSmp,1));
end
%==========================

%==========================
% Sc is not guaranteed to be non-singular, we have to keep less principle
% components. A better way might be using regularization instead of PCA
%
% options.Regu = 1;
% [eigvector, eigvalue] = LGE(data, Sp, Sc, options);
%
%==========================
if (~isfield(options,'Regu') | ~options.Regu) 
    if isfield(options,'Fisherface') & options.Fisherface
        options.PCARatio = nSmp - nLabel;
    else
        error('PCARatio is not correct!');
    end
end


if bGlobal & isfield(options,'keepMean') & options.keepMean
    [eigvector, eigvalue, elapse] = LGE(Sp, Sc, options);
else
    [eigvector, eigvalue, elapse] = LGE(Sp, Sc, options, data);
end

elapse.timeW = timeW;
elapse.timeAll = elapse.timeAll + elapse.timeW;


eigIdx = find(eigvalue < 1e-10);
eigvalue (eigIdx) = [];
eigvector(:,eigIdx) = [];





